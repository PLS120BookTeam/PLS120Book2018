sd = 18,
p = 0.10,
lblx = "what is this value \n if area is 0.10?",
cex = 0.95)
pnorm(q = 180, mean = 200, sd = 18)
left.tail(mean = 200,
sd = 18,
p = 0.10,
lblx = "what is this value \n if area is 0.10?",
cex = 0.95)
left.tail(mean = 200,
left.tail(mean = 200,
sd = 18,
p = 0.10,
lblx = "what is this value?")
left.tail(mean = 200,
sd = 18,
p = 0.10,
lblx = "what is this value?")
qnorm(p = 0.1, mean = 200, sd = 18)
knitr::opts_chunk$set(echo = TRUE)
library(arrangements)
ncombinations(k = 11, n = 15, replace = FALSE)
ncombinations(k = 10, n = 14) * ncombinations(k = 1, n = 3)
ncombinations(k = 1, n = 3)
ncombinations(k = 10, n = 14)
=14*13*12*11/4*3*2
14*13*12*11/4*3*2
14*13*12*11/(4*3*2)
ncombinations(k = 10, n = 14) * ncombinations(k = 1, n = 3)
ncombinations(k = 5, n = 52)
ncombinations(k = 1, n = 48)
(P4Aces <- ncombinations(k = 1, n = 48) * ncombinations(k = 4, n = 4) / ncombinations(k = 5, n = 52))
(SampleSpace <- tosscoin(times = 5, makespace = TRUE))
library(prob)
install.packages("prob")
library(prob)
(SampleSpace <- tosscoin(times = 5, makespace = TRUE))
nrows(tosscoin(times = 5, makespace = TRUE))
nrow(tosscoin(times = 5, makespace = TRUE))
# Number of H's in each outcome
SampleSpace$nH <- as.numeric(SampleSpace$toss1 == "H") +
as.numeric(SampleSpace$toss2 == "H") +
as.numeric(SampleSpace$toss3 == "H") +
as.numeric(SampleSpace$toss4 == "H") +
as.numeric(SampleSpace$toss5 == "H")
(nHfreq <- as.data.frame(table(SampleSpace$nH)))
# Rename columns
names(nHfreq) <- c("nHeads", "AbsFreq")
nHfreq$RelFreq <- nHfreq$AbsFreq / sum(nHfreq$AbsFreq)
pander::pander(nHfreq)
ncombinations(k = 3, n = 5)
1 - 0.30 - 0.20 - 0.15 - 0.05 - 0.10
0.80*0.05/0.50
0.08+(0.10/0.50)*0.20
0.08/0.12
SampleSpace
(5000 - 3500)/500
pnorm(q = 4500, mean = 3500, sd = 500)
pnorm(q = 1)
pnorm(q = 1)1-
1-pnorm(q = 1)
0.9772499 - 0.1586553
pnorm(q = 4500, mean = 3500, sd = 500) - pnorm(3000, mean = 3500, sd = 500)
qnomr(p=0.10, mean = 3500, sd = 500)
qnorm(p=0.10, mean = 3500, sd = 500)
rnorm(9, 97, 8)
round(rnorm(9, 97, 10), 1)
# Two tails
curve(df(x, df1 = 3, df2 = 5),
from = 0,
to = 35,
lwd = 2.5,
xlab = "",
ylab = "")
# Two tails
curve(df(x, df1 = 5, df2 = 5),
from = 0,
to = 35,
lwd = 2.5,
xlab = "",
ylab = "")
# Two tails
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 35,
lwd = 2.5,
xlab = "",
ylab = "")
# Two tails
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 10,
lwd = 2.5,
xlab = "",
ylab = "")
# Two tails
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 6,
lwd = 2.5,
xlab = "",
ylab = "")
abline(h = 0)
# Two tails
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "")
abline(h = 0)
cord.x <- c(qf(0.975, df1 = 5, df2 = 15), seq(qf(0.975, df1 = 5, df2 = 15), 35, 0.01), qf(0.975, df1 = 5, df2 = 15))
cord.y <- c(0, qf(seq(qf(0.975, df1 = 5, df2 = 15), 35, 0.01), df = 15), 0)
cord.y <- c(0, qf(seq(qf(0.975, df1 = 5, df2 = 15), 35, 0.01) df1 = 5, df2 = 15), 0)
cord.y <- c(0, qf(seq(qf(0.975, df1 = 5, df2 = 15), 35, 0.01), df1 = 5, df2 = 15), 0)
cord.x <- c(qf(0.975, df1 = 5, df2 = 15), seq(qf(0.975, df1 = 5, df2 = 15), 6, 0.01), qf(0.975, df1 = 5, df2 = 15))
cord.y <- c(0, qf(seq(qf(0.975, df1 = 5, df2 = 15), 6, 0.01), df1 = 5, df2 = 15), 0)
qf(0.975, df1 = 5, df2 = 15)
seq(qf(0.975, df1 = 5, df2 = 15), 6, 0.01)
cord.y <- c(0, pf(seq(qf(0.975, df1 = 5, df2 = 15), 6, 0.01), df1 = 5, df2 = 15), 0)
polygon(cord.x, cord.y, col = "orange")
qf(0.975, df1 = 5, df2 = 15)
qf(0.95, df1 = 5, df2 = 15)
qf(0.95, df1 = 5, df2 = 15), 5, 0.01)
qf(0.95, df1 = 5, df2 = 15)
seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.01)
qf(0.95, df1 = 5, df2 = 15)
cord.x <- c(qf(0.95, df1 = 5, df2 = 15), seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), qf(0.95, df1 = 5, df2 = 15))
cord.y <- c(0, pf(seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), df1 = 5, df2 = 15), 0)
polygon(cord.x, cord.y, col = "orange")
pf(seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), df1 = 5, df2 = 15)
cord.y <- c(0, df(seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), df1 = 5, df2 = 15), 0)
polygon(cord.x, cord.y, col = "orange")
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "")
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "")
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = 5, df2 = 15), seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), qf(0.95, df1 = 5, df2 = 15))
cord.y <- c(0, df(seq(qf(0.95, df1 = 5, df2 = 15), 5, 0.02), df1 = 5, df2 = 15), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = 5, df2 = 15),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE)
### F()
df1 <- 15
df2 <- 15
# Two tails on the right
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "")
abline(h = 0)
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE)
df1 <- 15
df2 <- 15
# Two tails on the right
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
qf(0.95, df1 = df1, df2 = df2)
text(x = -0.025, y = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
text(x = 0, y = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
text(y = -0.025, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
text(y = -0.03, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
# Two tails on the right
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances")
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
qf(0.95, df1 = df1, df2 = df2)
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.20, x = 2.85, pos = 4,
labels = unname(TeX("$\alpha/2")), col = "blue")
text(y = 0.20, x = 2.85, pos = 4,
labels = unname(TeX("$\alpha/2$")), col = "blue")
text(y = 0.20, x = 2.85, pos = 4,
labels = unname(TeX("$\alpha/2")), col = "blue")
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.20, x = 2.85, pos = 4,
labels = unname(TeX("$\alpha/2")), col = "blue")
### F()
df1 <- 15
df2 <- 15
# Two tails on the right
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.20, x = 2.85, pos = 4,
labels = unname(TeX("$\alpha/2")), col = "blue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.20, x = 2.85, pos = 4,
labels = TeX("$\alpha/2"), col = "blue")
text(y = 0.20, x = 2.85, pos = 4,
labels = TeX("\alpha/2"), col = "blue")
# Two tails on the right
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.20, x = 2.85, pos = 4,
labels = TeX("$\\alpha/2"), col = "blue")
text(y = 0.20, x = 2.85, pos = 4,
labels = TeX("$\\frac{\\alpha}{2}"), col = "blue")
text(y = 0.19, x = 2.80, pos = 4,
labels = TeX("$\\frac{\\alpha}{2}"), col = "blue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
ylim = c(-0.05, 0.9))
abline(h = 0)
# Add the shaded area.
cord.x <- c(qf(0.95, df1 = df1, df2 = df2),
seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
qf(0.95, df1 = df1, df2 = df2))
cord.y <- c(0,
df(seq(qf(0.95, df1 = df1, df2 = df2), 5, 0.02),
df1 = df1, df2 = df2), 0)
polygon(cord.x, cord.y, col = "skyblue")
curve(df(x, df1 = df1, df2 = df2),
from = 0,
to = 5,
lwd = 2.5,
xlab = "",
ylab = "",
add = TRUE,
ylim = c(-0.05, 0.9))
text(y = -0.04, x = qf(0.95, df1 = df1, df2 = df2), pos = 4,
labels = "Reject equality of variances", col = "red")
lines(x = c(2.5, 2.8), y = c(0.03, 0.20))
library(latex2exp)
text(y = 0.19, x = 2.80, pos = 4,
labels = TeX("$\\frac{\\alpha}{2}"), col = "blue")
bean.yield <- data.frame(
yield = c("yield 1", "yield 2", "yield 3", "yield 4"),
drought = c(590, 720, 720, 190 ),
irrigated = c(2990, 2950, 2660, 2120))
bean.yield
t.test(x=bean.yield$drought, y = bean.yield$irrigated)
var(bean.yield$drought)
var(bean.yield$irrigated)
# calculate the sample variances for each treatment "by hand"
var1 <- sum((bean.yield$drought - Ybar1)^2) / (r1 - 1)
t.test(x=bean.yield$drought, y = bean.yield$irrigated, var.equal = TRUE)
qf(p = 0.95, df1 = 3, df2 = 3)
# calculation of F-critical value using alpha = 0.10 /2 since the F-test is two-tailed
p <- 0.10/2
Fcrit.upper <- qf(p, r1-1, r2-1, lower.tail = FALSE)
x <- seq(0.000001,16, 0.25)
pd <- df(x, df1 = 3, df2 = 3, ncp = 0)
plot(x, pd,
type = "l",
xlab = "F-Value", ylab = "Probability Distribution",
main = "the F-Distribution Curve",
lwd = 1.5)
abline(v = Fcrit.upper,
col = "chartreuse3",
lty = 3)
(2*var(bean.yield$drought) + 2*var(bean.yield$irrigated)/4
(2*var(bean.yield$drought) + 2*var(bean.yield$irrigated))/4
# the pooled variance can be calculated from taking the average of the to sample variances, since they have the same sample size
pooled.var <- ( var1 + var2 ) / 2
(3*var(bean.yield$drought) + 3*var(bean.yield$irrigated))/6
2*(r-1)
# since r1 = r2 = 4, we can just use r = 4 for continued calculations
r <- length(bean.yield$yield)
2*(r-1)
#a quicker method to calculate the t-statistic
bean.test <- t.test(bean.yield$irrigated, bean.yield$drought,
alternative = "two.sided", paired = FALSE,
var.equal = TRUE)
bean.test
#a quicker method to calculate the t-statistic
bean.test <- t.test(bean.yield$irrigated, bean.yield$drought,
alternative = "two.sided", paired = FALSE,
var.equal = FALSE)
bean.test
#a quicker method to calculate the t-statistic
bean.test <- t.test(bean.yield$irrigated, bean.yield$drought,
alternative = "greater", paired = FALSE,
var.equal = TRUE)
bean.test
qt(0.025, df = 6)
qt(p = 0.975, df = r1 - 1)
qt(p = 0.975, df = r - 1)
var(bean.yield$drought)
var(bean.yield$irrigated)
sqrt(var(bean.yield$drought)/4 + var(bean.yield$irrigated))
2125/420.4065
qt(0.975, 3)
(bean.test.unequal <- t.test(bean.yield$irrigated, bean.yield$drought,
alternative = "two.sided", paired = FALSE,
var.equal = FALSE))
bean.yield$irrigated
bean.yield$drought
2125 -3.182446 * 420.41
pt(5.055, df = 3)
1-pt(5.055, df = 3)
d1 <- rnorm(5, mean = 200, sd = 18)
d1
d1 <- round(rnorm(5, mean = 200, sd = 18),1)
d1
d1 <- round(rnorm(5, mean = 200, sd = 18), 0)
d1
mean(d1)
var(d1)
sd(d1)
df1 = length(d1) - 1
df1
mu0 <- 210
var.hat.ybar <- var(d1)/df1
var.hat.ybar
sd.hat.ybar <- sqrt(var.hat.ybar)
sd.hat.ybar
confint(lm(d1 ~1))
(204.962 - 177.838)/2
tcrit <- qt(0.975, df = df1)
tcrit
tcrit * sd.hat.ybar
summary(lm(d1 ~1))
var.hat.ybar <- var(d1)/length(d1)
sd.hat.ybar <- sqrt(var.hat.ybar)
tcrit * sd.hat.ybar
d1
mean(d1)
sd(d1)
sd.hat.ybar
(191.4 - 210)/sd.hat.ybar
qt(0.025, df = df1)
tcrit
df1
qt(0.025, df1)
